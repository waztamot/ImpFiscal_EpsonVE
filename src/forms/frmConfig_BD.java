/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package forms;

import generic.OracleConection;
import generic.iconBarraProgreso;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * Formulario para el control de la configuracion General (DB)
 * @version 1.0
 * @author Ing. Javier Alarcon
 */
public class frmConfig_BD extends javax.swing.JDialog {

    /*---------------------------------------------------*/
    /*---               Constructores                 ---*/
    /*---------------------------------------------------*/
    /**
     * Constructor estandar de la clase jDialog
     * @param parent
     * @param modal 
     */
    public frmConfig_BD(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
            e.printStackTrace();
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.iconos = new iconBarraProgreso();
        inicializar();
    }
    
    /**
     * Constructor modificado con archivo de config de la clase jDialog
     * @param parent
     * @param modal
     * @param configGeneral 
     */
    public frmConfig_BD(java.awt.Frame parent, boolean modal,Properties configGeneral) {
        super(parent, modal);
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
            e.printStackTrace();
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.configGeneral = configGeneral;
        this.iconos = new iconBarraProgreso();
        inicializar();
    }

    /**
     * Colocar imagen del titulo de la pantalla
     * @return 
     */
    public Image getIconImage(){
        Image retValue;
        retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("recurso/Iconos/tunal_icon.png"));

        return retValue;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelInformacion = new javax.swing.JPanel();
        jlblValoresDefect = new javax.swing.JLabel();
        jlblDriverConn = new javax.swing.JLabel();
        jtxtDriverConn = new javax.swing.JTextField();
        jlblServerConn = new javax.swing.JLabel();
        jtxtServerConn = new javax.swing.JTextField();
        jlblPuertoConn = new javax.swing.JLabel();
        jtxtPuertoConn = new javax.swing.JTextField();
        jlblUsuarioDB = new javax.swing.JLabel();
        jtxtNombreDB = new javax.swing.JTextField();
        jlblClaveDB = new javax.swing.JLabel();
        jpassClaveDB = new javax.swing.JPasswordField();
        jcmdTestConn = new javax.swing.JButton();
        jlblNombreDB = new javax.swing.JLabel();
        jtxtUsuarioDB = new javax.swing.JTextField();
        jpanelBotones = new javax.swing.JPanel();
        jcmdGuardar = new javax.swing.JButton();
        jcmdCancelar = new javax.swing.JButton();
        jcmdSalir = new javax.swing.JButton();
        jtbarNotificacion = new javax.swing.JToolBar();
        jsprMargen = new javax.swing.JToolBar.Separator();
        jlblLogoTunal = new javax.swing.JLabel();
        jsprMargen1 = new javax.swing.JToolBar.Separator();
        jlblNotificacion = new javax.swing.JLabel();
        jtbarInfo = new javax.swing.JToolBar();
        jlblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Impresora Fiscal Epson VE - El Tunal C.A.");
        setModal(true);
        setResizable(false);

        jpanelInformacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración Conexion BD"));
        jpanelInformacion.setFocusable(false);

        jlblValoresDefect.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jlblValoresDefect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/Knob_Grey_Reset32.png"))); // NOI18N
        jlblValoresDefect.setToolTipText("Restaurar valores por defecto");
        jlblValoresDefect.setFocusable(false);
        jlblValoresDefect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblValoresDefectMouseClicked(evt);
            }
        });

        jlblDriverConn.setText("Driver de Conexion");
        jlblDriverConn.setFocusable(false);

        jtxtDriverConn.setToolTipText("<HTML>\n<BODY>\nDriver de conexion a la Base de Datos<br/>\n<B>Por ejemplo</B> oracle.jdbc.OracleDriver\n</BODY>\n</HTML>");

        jlblServerConn.setText("Server Base Datos");
        jlblServerConn.setFocusable(false);

        jtxtServerConn.setToolTipText("<HTML>\n<BODY>\nNombre o  IP del Servidor de la Base de Datos<br/>\n<B>Por ejemplo </B> localhost\n</BODY>\n</HTML>");

        jlblPuertoConn.setText("Puerto");
        jlblPuertoConn.setFocusable(false);

        jtxtPuertoConn.setToolTipText("<HTML>\n<BODY>\nPuerto de conexion con la Base de Datos<br/>\n<B>Por ejemplo </B> 1521\n</BODY>\n</HTML>");

        jlblUsuarioDB.setText("Usuario Base Datos");
        jlblUsuarioDB.setFocusable(false);

        jtxtNombreDB.setToolTipText("<HTML>\n<BODY>\nNombre de la Base de Datos<br/>\n<B>Por ejemplo </B> BaseDatos\n</BODY>\n</HTML>");

        jlblClaveDB.setText("Clave Base Datos");
        jlblClaveDB.setFocusable(false);

        jpassClaveDB.setToolTipText("<HTML>\n<BODY>\nContraseña para la conexion a la Base de Datos<br/>\n<B>Por ejemplo </B> clave\n</BODY>\n</HTML>");

        jcmdTestConn.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jcmdTestConn.setMnemonic('T');
        jcmdTestConn.setText("Test Conexion");
        jcmdTestConn.setToolTipText("<HTML>\n<BODY>\nRealizar el TestConexion para verificar la</br> \nconfiguración a la Base de Datos\n</BODY>\n</HTML>");
        jcmdTestConn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdTestConnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdTestConnMouseExited(evt);
            }
        });
        jcmdTestConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdTestConnActionPerformed(evt);
            }
        });

        jlblNombreDB.setText("Nombre Base Datos");
        jlblNombreDB.setFocusable(false);

        jtxtUsuarioDB.setToolTipText("<HTML>\n<BODY>\nUsuario para la conexion a la Base de Datos<br/>\n<B>Por ejemplo </B> user\n</BODY>\n</HTML>");

        org.jdesktop.layout.GroupLayout jpanelInformacionLayout = new org.jdesktop.layout.GroupLayout(jpanelInformacion);
        jpanelInformacion.setLayout(jpanelInformacionLayout);
        jpanelInformacionLayout.setHorizontalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblDriverConn)
                    .add(jlblServerConn)
                    .add(jlblNombreDB)
                    .add(jlblUsuarioDB)
                    .add(jlblClaveDB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpanelInformacionLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jcmdTestConn)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jpanelInformacionLayout.createSequentialGroup()
                        .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jtxtNombreDB)
                            .add(jpassClaveDB)
                            .add(jtxtUsuarioDB)
                            .add(jpanelInformacionLayout.createSequentialGroup()
                                .add(jtxtServerConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jlblPuertoConn)
                                .add(6, 6, 6)
                                .add(jtxtPuertoConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jpanelInformacionLayout.createSequentialGroup()
                                .add(jtxtDriverConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 206, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jlblValoresDefect)))
                        .addContainerGap())))
        );
        jpanelInformacionLayout.setVerticalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacionLayout.createSequentialGroup()
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jlblDriverConn)
                        .add(jtxtDriverConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jlblValoresDefect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblServerConn)
                    .add(jtxtServerConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblPuertoConn)
                    .add(jtxtPuertoConn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxtNombreDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblNombreDB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxtUsuarioDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblUsuarioDB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblClaveDB)
                    .add(jpassClaveDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jcmdTestConn)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpanelBotones.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpanelBotones.setFocusable(false);

        jcmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/KnobBlue_Guardar32.png"))); // NOI18N
        jcmdGuardar.setMnemonic('G');
        jcmdGuardar.setText("Guardar");
        jcmdGuardar.setToolTipText("Guardar modificaciones en la BD");
        jcmdGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdGuardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdGuardarMouseExited(evt);
            }
        });
        jcmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdGuardarActionPerformed(evt);
            }
        });

        jcmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/Knob_Cancel32.png"))); // NOI18N
        jcmdCancelar.setMnemonic('C');
        jcmdCancelar.setText("Cancelar");
        jcmdCancelar.setToolTipText("Cancelar el proceso");
        jcmdCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdCancelarMouseExited(evt);
            }
        });
        jcmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdCancelarActionPerformed(evt);
            }
        });

        jcmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/Knob_LoopOn32.png"))); // NOI18N
        jcmdSalir.setMnemonic('S');
        jcmdSalir.setText("Salir");
        jcmdSalir.setToolTipText("Cerrar pantalla");
        jcmdSalir.setMaximumSize(new java.awt.Dimension(116, 42));
        jcmdSalir.setMinimumSize(new java.awt.Dimension(116, 42));
        jcmdSalir.setPreferredSize(new java.awt.Dimension(116, 42));
        jcmdSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdSalirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdSalirMouseExited(evt);
            }
        });
        jcmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdSalirActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpanelBotonesLayout = new org.jdesktop.layout.GroupLayout(jpanelBotones);
        jpanelBotones.setLayout(jpanelBotonesLayout);
        jpanelBotonesLayout.setHorizontalGroup(
            jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpanelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jcmdGuardar)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jcmdCancelar)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jcmdSalir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpanelBotonesLayout.linkSize(new java.awt.Component[] {jcmdCancelar, jcmdGuardar, jcmdSalir}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jpanelBotonesLayout.setVerticalGroup(
            jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpanelBotonesLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jcmdCancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcmdGuardar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcmdSalir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jtbarNotificacion.setFloatable(false);
        jtbarNotificacion.setRollover(true);
        jtbarNotificacion.setFocusable(false);
        jtbarNotificacion.setName(""); // NOI18N
        jtbarNotificacion.add(jsprMargen);

        jlblLogoTunal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/tunal_icon.png"))); // NOI18N
        jlblLogoTunal.setFocusable(false);
        jtbarNotificacion.add(jlblLogoTunal);

        jsprMargen1.setSeparatorSize(new java.awt.Dimension(20, 10));
        jtbarNotificacion.add(jsprMargen1);

        jlblNotificacion.setText("                 ");
        jlblNotificacion.setFocusable(false);
        jlblNotificacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jlblNotificacionMouseExited(evt);
            }
        });
        jtbarNotificacion.add(jlblNotificacion);

        jtbarInfo.setFloatable(false);
        jtbarInfo.setRollover(true);
        jtbarInfo.setFocusable(false);

        jlblInfo.setText("                ");
        jlblInfo.setToolTipText("");
        jlblInfo.setFocusable(false);
        jtbarInfo.add(jlblInfo);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jtbarNotificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 356, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jtbarInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jpanelBotones, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelBotones, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jtbarNotificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtbarInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Restaurar progressBar Notificacion
     * @param evt 
     */
    private void jlblNotificacionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblNotificacionMouseExited
        //  Proceso
        this.jlblNotificacion.setText("         ");
        this.jlblNotificacion.setIcon(null);
    }//GEN-LAST:event_jlblNotificacionMouseExited

    /**
     * Colocar combinacion de teclas para opcion "Guardar" en progressBar Info
     * @param evt 
     */
    private void jcmdGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdGuardarMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + G");
    }//GEN-LAST:event_jcmdGuardarMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdGuardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdGuardarMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdGuardarMouseExited

    /**
     * Guardar datos de configuracion BaseDatos
     * @param evt 
     */
    private void jcmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdGuardarActionPerformed
        //  Variables
        String value = "";
        
        //  Proceso
        try {
            //  Proceso - Driver
            value = this.jtxtDriverConn.getText().trim();
            this.configGeneral.setProperty("db_class_forName", value);
            value = "";
            //  Proceso - CadenaConn
            value = this.getPrefCadConn().trim() + this.jtxtServerConn.
                    getText().trim() + ":" + this.jtxtPuertoConn.
                    getText().trim() + "/" + this.jtxtNombreDB.getText().trim();
            this.configGeneral.setProperty("db_string_jdbc", value.trim());
            value = "";
            //  Proceso - UserDB
            value = this.jtxtUsuarioDB.getText().trim();
            this.configGeneral.setProperty("db_user_jdbc", value);
            value = "";
            //  Proceso - PasswordDB
            value = this.jpassClaveDB.getText().trim();
            this.configGeneral.setProperty("db_pass_jdbc", value);
            value = "";
            //  Mensaje del Sistema
            this.jlblNotificacion.setIcon(iconos.getSuccessImage());
            this.jlblNotificacion.setText("Guardado Exitosamente!");
            this.setOk(true);
        } catch (Exception ex) {
            this.jlblNotificacion.setIcon(iconos.getErrorImage());
            this.jlblNotificacion.setText("Error no se pudo guardar la informacion!");
            Logger.getLogger(frmConfig_ImpFiscal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jcmdGuardarActionPerformed

    /**
     * Colocar combinacion de teclas para opcion "Cancelar" en progressBar Info
     * @param evt 
     */
    private void jcmdCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdCancelarMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + C");
    }//GEN-LAST:event_jcmdCancelarMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdCancelarMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdCancelarMouseExited

    /**
     * Cancelar el proceso de configuracion BaseDatos
     * @param evt 
     */
    private void jcmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdCancelarActionPerformed
        //  Variables
        String value = "";
        
        //  Proceso - Driver
        this.jtxtDriverConn.setText(this.configGeneral.
                    getProperty("db_class_forName").trim());
        //  Proceso - CadenaConn
        value = this.configGeneral.getProperty("db_string_jdbc").trim();
        value = value.replace("\\", "");
        value = value.substring(value.indexOf("@//")).trim();
        //  Proceso - CadenaConn (Server)
        this.jtxtServerConn.setText(value.substring(0, value.
                indexOf(":")).trim());
        this.jtxtServerConn.setText(this.jtxtServerConn.getText().
                replace("@//", "").trim());
        value = value.substring(value.indexOf(":")).trim();
        //  Proceso - CadenaConn (Puerto)
        this.jtxtPuertoConn.setText(value.substring(0, value.
                indexOf("/")).trim());
        this.jtxtPuertoConn.setText(this.jtxtPuertoConn.getText().
                replace(":", "").trim());
        value = value.substring(value.indexOf("/")).trim();
        //  Proceso - CadenaConn (NameDB)
        this.jtxtNombreDB.setText(value.replace("/", "").trim());
        //  Proceso - UserDB
        this.jtxtUsuarioDB.setText(this.configGeneral.
                getProperty("db_user_jdbc").trim());
        //  Proceso - PasswordDB
        this.jpassClaveDB.setText(this.configGeneral.
                getProperty("db_pass_jdbc").trim());
    }//GEN-LAST:event_jcmdCancelarActionPerformed

    /**
     * Colocar combinacion de teclas para opcion "Salir" en progressBar Info
     * @param evt 
     */
    private void jcmdSalirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdSalirMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + S");
    }//GEN-LAST:event_jcmdSalirMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdSalirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdSalirMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdSalirMouseExited

    /**
     * Salir del formulario actual
     * @param evt 
     */
    private void jcmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdSalirActionPerformed
        //  Proceso
        this.setVisible(false);
    }//GEN-LAST:event_jcmdSalirActionPerformed

    /**
     * Restaurar valores por defecto de conexion a BD
     * @param evt 
     */
    private void jlblValoresDefectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblValoresDefectMouseClicked
        //  Proceso
        try {
            //  Proceso - Driver
            this.configGeneral.setProperty("db_class_forName",this.configGeneral.
                    getProperty("db_class_forName_def").trim());
            //  Proceso - CadenaConn
            this.configGeneral.setProperty("db_string_jdbc",this.configGeneral.
                    getProperty("db_string_jdbc_def").trim());
            //  Proceso - UserDB
            this.configGeneral.setProperty("db_user_jdbc", this.configGeneral.
                    getProperty("db_user_jdbc_def"));
            //  Proceso - PasswordDB
            this.configGeneral.setProperty("db_pass_jdbc", this.configGeneral.
                    getProperty("db_pass_jdbc_def"));
            //  Incializar pantalla
            jcmdCancelarActionPerformed(null);
            //  Mensaje del sistema
            this.jlblNotificacion.setIcon(iconos.getSuccessImage());
            this.jlblNotificacion.setText("Restaurado Exitosamente!");
            this.setOk(true);
        } catch (Exception ex) {
            this.jlblNotificacion.setIcon(iconos.getErrorImage());
            this.jlblNotificacion.setText("Error no se pudo restaurar la informacion!");
            Logger.getLogger(frmConfig_ImpFiscal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jlblValoresDefectMouseClicked

    /**
     * Realizar Test de conexion a la BaseDatos
     * @param evt 
     */
    private void jcmdTestConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdTestConnActionPerformed
        //  Variables
        OracleConection connOra;
        
        //  Proceso - Guardar
        jcmdGuardarActionPerformed(null);
        
        //  Proceso - Prueba de conexion
        try {
            connOra = new OracleConection(this.configGeneral);
            connOra.Conectar();
            if (connOra.isConnOk()) {
                connOra.Desconectar();
                //  Mensaje del sistema
                this.jlblNotificacion.setIcon(iconos.getSuccessImage());
                this.jlblNotificacion.setText("Test de conexion a BD se realizo exitosamente!");
            } else {
                this.jlblNotificacion.setIcon(iconos.getWarningImage());
                this.jlblNotificacion.setText("Fallo el test de conexion a BD!");
            }
        } catch (Exception ex) {
            this.jlblNotificacion.setIcon(iconos.getErrorImage());
            this.jlblNotificacion.setText("Error test a BD incorrecto!");
            Logger.getLogger(frmConfig_ImpFiscal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jcmdTestConnActionPerformed

    /**
     * Colocar combinacion de teclas para opcion "TestConn" en progressBar Info
     * @param evt 
     */
    private void jcmdTestConnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdTestConnMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + T");
    }//GEN-LAST:event_jcmdTestConnMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdTestConnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdTestConnMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdTestConnMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jcmdCancelar;
    private javax.swing.JButton jcmdGuardar;
    private javax.swing.JButton jcmdSalir;
    private javax.swing.JButton jcmdTestConn;
    private javax.swing.JLabel jlblClaveDB;
    private javax.swing.JLabel jlblDriverConn;
    private javax.swing.JLabel jlblInfo;
    private javax.swing.JLabel jlblLogoTunal;
    private javax.swing.JLabel jlblNombreDB;
    private javax.swing.JLabel jlblNotificacion;
    private javax.swing.JLabel jlblPuertoConn;
    private javax.swing.JLabel jlblServerConn;
    private javax.swing.JLabel jlblUsuarioDB;
    private javax.swing.JLabel jlblValoresDefect;
    private javax.swing.JPanel jpanelBotones;
    private javax.swing.JPanel jpanelInformacion;
    private javax.swing.JPasswordField jpassClaveDB;
    private javax.swing.JToolBar.Separator jsprMargen;
    private javax.swing.JToolBar.Separator jsprMargen1;
    private javax.swing.JToolBar jtbarInfo;
    private javax.swing.JToolBar jtbarNotificacion;
    private javax.swing.JTextField jtxtDriverConn;
    private javax.swing.JTextField jtxtNombreDB;
    private javax.swing.JTextField jtxtPuertoConn;
    private javax.swing.JTextField jtxtServerConn;
    private javax.swing.JTextField jtxtUsuarioDB;
    // End of variables declaration//GEN-END:variables

    /*---------------------------------------------------*/
    /*---                  Atributos                  ---*/
    /*---------------------------------------------------*/
    private Properties configGeneral;
    private iconBarraProgreso iconos;
    private String prefCadConn;
    private boolean ok;

    /*---------------------------------------------------*/
    /*---             Metodos Set y Get               ---*/
    /*---------------------------------------------------*/
    /**
     * Retorna el archivo properties de config General(DB)
     * @return configGeneral
     */
    public Properties getConfigGeneral() {
        return configGeneral;
    }

    /**
     * Asignar el archivo properties de config General(DB)
     * @param configGeneral
     */
    public void setConfigGeneral(Properties configGeneral) {
        this.configGeneral = configGeneral;
    }

    /**
     * Retorna el prefijo de la cadena de conexion (DB)
     * @return prefCadConn
     */
    public String getPrefCadConn() {
        return prefCadConn;
    }

    /**
     * Asignar el prefijo de la cadena de conexion (DB)
     * @param prefCadConn 
     */
    private void setPrefCadConn(String prefCadConn) {
        this.prefCadConn = prefCadConn;
    }

    /**
     * Retorna si fueron guardados los cambios al archivo de configuracion
     * @return ok
     */
    public boolean isOk() {
        return ok;
    }

    /**
     * Asigna si fueron guardados los cambios al archivo de configuracion
     * @param ok 
     */
    private void setOk(boolean ok) {
        this.ok = ok;
    }
    
    /*---------------------------------------------------*/
    /*---             Metodos especificos             ---*/
    /*---------------------------------------------------*/
    /**
     * Inicializar valores del formulario segun archivo
     * de configuracion
     */
    public final void inicializar(){
        //  Variables
        String value = "";
        
        //  Proceso
        this.setOk(false);
        try {
            this.jtxtDriverConn.setText(this.configGeneral.
                    getProperty("db_class_forName").trim());
            value = this.configGeneral.getProperty("db_string_jdbc").trim();
            value = value.replace("\\", "");
            this.setPrefCadConn(value.substring(0, value.indexOf("@//")).trim() + "@//");
            value = value.substring(value.indexOf("@//")).trim();
            this.jtxtServerConn.setText(value.substring(0, value.indexOf(":")).trim());
            this.jtxtServerConn.setText(this.jtxtServerConn.getText().replace("@//", "").trim());
            value = value.substring(value.indexOf(":")).trim();
            this.jtxtPuertoConn.setText(value.substring(0, value.indexOf("/")).trim());
            this.jtxtPuertoConn.setText(this.jtxtPuertoConn.getText().replace(":", "").trim());
            value = value.substring(value.indexOf("/")).trim();
            this.jtxtNombreDB.setText(value.replace("/", "").trim());
            this.jtxtUsuarioDB.setText(this.configGeneral.
                    getProperty("db_user_jdbc").trim());
            this.jpassClaveDB.setText(this.configGeneral.
                    getProperty("db_pass_jdbc").trim());
        } catch (Exception ex) {
            Logger.getLogger(frmConfig_BD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
