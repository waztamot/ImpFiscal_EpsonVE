/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package forms;

import generic.OracleConection;
import generic.appConfiguracion;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * Formulario para el inicio del sistema
 * @version 1.0
 * @author Ing. Javier Alarcon
 */
public class frmInicio extends javax.swing.JFrame {

    /*---------------------------------------------------*/
    /*---               Constructores                 ---*/
    /*---------------------------------------------------*/
    /**
     * Constructor estandar de la clase jFrame
     */
    @SuppressWarnings("CallToPrintStackTrace")
    public frmInicio() {
        //  Proceso
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
            e.printStackTrace();
        }
        initComponents();
        this.setLocationRelativeTo(null);
        //  Inicializar
        time = new Timer(50,new progeso());
        //  Proceso de carga de datos
        initProcesos();
        this.setVisible(false);
    }
    
    /**
     * Clase que controla el progreso de la barra de estado
     */
    public class progeso implements ActionListener {
        /*---------------------------------------------------*/
        /*---                  Atributos                  ---*/
        /*---------------------------------------------------*/
        private boolean okp1=false, okp2=false, okp3=false, okp4=false;
        
        /*---------------------------------------------------*/
        /*---             Metodos clase padre             ---*/
        /*---------------------------------------------------*/
        @Override
        public void actionPerformed(ActionEvent evt){
            int n = jpbrBarraProgreso.getValue();
            
            if (n < 100){
                n++;
                jpbrBarraProgreso.setValue(n);
                okp1 = true;
                if ((n == 25) && (okp1)){
                    jlblProceso.setText("Configurando aplicacion...");
                    okp2 = verificarConfiguracion();
                }
                if ((n == 50) && (okp2)){
                    jlblProceso.setText("Configurando conexion...");
                    okp3 = realizarConexion();
                }
                if ((n == 75) && (okp3)) {
                    jlblProceso.setText("Levantando procesos...");
                    okp4 = true;
                }
            }else{
                if (okp1 && okp2 && okp3 && okp4){
                    jlblProceso.setText("Listo!");
                    time.stop();
                    jlblCerrar.setText("Continuar ->");
                } else {
                    jlblCerrar.setText("Error!!!");
                }
            }
        }
    }
    
    /**
     * Colocar imagen del titulo de la pantalla
     * @return retValue
     */
    @Override
    public Image getIconImage(){
        Image retValue;
        retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("recurso/Iconos/tunal_icon.png"));

        return retValue;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelInformacion = new javax.swing.JPanel();
        jlblImagen = new javax.swing.JLabel();
        jlblProceso = new javax.swing.JLabel();
        jpbrBarraProgreso = new javax.swing.JProgressBar();
        jlblCerrar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setLocationByPlatform(true);
        setUndecorated(true);

        jpanelInformacion.setBackground(new java.awt.Color(255, 255, 255));
        jpanelInformacion.setToolTipText("");
        jpanelInformacion.setOpaque(false);

        jlblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/inicio_tunal.png"))); // NOI18N

        jlblProceso.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblProceso.setText("Iniciando...");

        jlblCerrar.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jlblCerrar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblCerrar.setText("(X) Cancelar");
        jlblCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblCerrarMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpanelInformacionLayout = new org.jdesktop.layout.GroupLayout(jpanelInformacion);
        jpanelInformacion.setLayout(jpanelInformacionLayout);
        jpanelInformacionLayout.setHorizontalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .add(jlblProceso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jlblCerrar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jpanelInformacionLayout.createSequentialGroup()
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jlblImagen, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .add(jpbrBarraProgreso, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(0, 0, Short.MAX_VALUE))
        );
        jpanelInformacionLayout.setVerticalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpanelInformacionLayout.createSequentialGroup()
                .add(jlblImagen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 293, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblProceso)
                    .add(jlblCerrar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jpbrBarraProgreso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cerrar el inicio del sistema o continuar con el proceso
     * @param evt 
     */
    private void jlblCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblCerrarMouseClicked
        //  Proceso
        if ((jlblCerrar.getText().equalsIgnoreCase("(X) Cancelar")) || 
                (jlblCerrar.getText().equalsIgnoreCase("Error!!!")))
            System.exit(0);
        else{
            this.setVisible(false);
        }
    }//GEN-LAST:event_jlblCerrarMouseClicked

    /**
     * Inicializar los procesos
     */
    private void initProcesos(){
        time.start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel jlblCerrar;
    javax.swing.JLabel jlblImagen;
    javax.swing.JLabel jlblProceso;
    javax.swing.JPanel jpanelInformacion;
    javax.swing.JProgressBar jpbrBarraProgreso;
    // End of variables declaration//GEN-END:variables
    
    /*---------------------------------------------------*/
    /*---                  Atributos                  ---*/
    /*---------------------------------------------------*/
    private final Timer time;
    private OracleConection connOra;
    private appConfiguracion appConfig;

    /*---------------------------------------------------*/
    /*---             Metodos Set y Get               ---*/
    /*---------------------------------------------------*/
    /**
     * Retorna la conexion a BD
     * @return connOra
     */
    public OracleConection getConnOra() {
        return connOra;
    }

    /**
     * Asignar la conexion a BD
     * @param connOra 
     */
    public void setConnOra(OracleConection connOra) {
        this.connOra = connOra;
    }

    /**
     * Retorna el objeto de control para las configuraciones
     * @return appConfig
     */
    public appConfiguracion getAppConfig() {
        return appConfig;
    }

    /**
     * Asigna el objeto de control para las configuraciones
     * @param appConfig 
     */
    public void setAppConfig(appConfiguracion appConfig) {
        this.appConfig = appConfig;
    }
    
    /*---------------------------------------------------*/
    /*---             Metodos especificos             ---*/
    /*---------------------------------------------------*/
    /**
     * Retorna true si toda la Configuracion es correcta en caso contrario
     * retorna false
     * @return ok
     */
    public boolean verificarConfiguracion(){
        //  Variables y Objetos
        boolean ok = true;
        frmConfig_ImpFiscal vntConfIF;
        frmConfig_BD vntConfDB;
        frmConfig_VerificarDatos vntConfVerif;
        frmConfig_TareaProg vntConfTareaP;
        frmConfig_Compania vntConfCp;
        
        //  Procesos
        this.appConfig = new appConfiguracion();
        if (this.appConfig.leerConfiguracion()){
            if (this.appConfig.getPropsControl().
                    getProperty("config").equalsIgnoreCase("DEFAULT")){
                this.appConfig.getPropsControl().setProperty("config", "modify");
                vntConfVerif = new frmConfig_VerificarDatos(this, true, 
                        this.appConfig.getPropsControl());
                vntConfVerif.setVisible(true);
                this.appConfig.setPropsControl(vntConfVerif.getConfigControl());
                vntConfVerif.dispose();
            }
            if (this.appConfig.getPropsGeneral().
                    getProperty("config").equalsIgnoreCase("DEFAULT")){
                this.appConfig.getPropsGeneral().setProperty("config", "modify");
                vntConfDB = new frmConfig_BD(this,true,
                        this.appConfig.getPropsGeneral());
                vntConfDB.setVisible(true);
                this.appConfig.setPropsGeneral(vntConfDB.getConfigGeneral());
                vntConfDB.dispose();
            }
            if (this.appConfig.getPropsImpFiscal().
                    getProperty("config").equalsIgnoreCase("DEFAULT")){
                this.appConfig.getPropsImpFiscal().setProperty("config", "modify");
                vntConfIF = new frmConfig_ImpFiscal(this,true,
                        this.appConfig.getPropsImpFiscal());
                vntConfIF.setVisible(true);
                this.appConfig.setPropsImpFiscal(vntConfIF.getConfigFiscal());
                vntConfIF.dispose();
            }
            if (this.appConfig.getPropsTareaProg().
                    getProperty("config").equalsIgnoreCase("DEFAULT")){
                this.appConfig.getPropsTareaProg().setProperty("config", "modify");
                vntConfTareaP = new frmConfig_TareaProg(this, true, 
                        this.appConfig.getPropsTareaProg());
                vntConfTareaP.setVisible(true);
                this.appConfig.setPropsTareaProg(vntConfTareaP.getConfigTareaProg());
                vntConfTareaP.dispose();
            }
            if (this.appConfig.getPropsGeneral().
                    getProperty("db_empresa").equalsIgnoreCase("DEFAULT")){
                vntConfCp = new frmConfig_Compania(this,true,
                        this.appConfig.getPropsGeneral());
                vntConfCp.setVisible(true);
                this.appConfig.setPropsGeneral(vntConfCp.getConfigGral());
                vntConfCp.dispose();
            }
            ok = this.appConfig.escribirConfiguracion();
        }
        else {
            ok = false;
        }
        
        //  Resultado
        return ok;
    }
    
    /**
     * Retorna true si se establecio la conexion con el server DB en caso 
     * contrario retorna false
     * @return ok
     */
    public boolean realizarConexion(){
        this.connOra = new OracleConection(this.appConfig.getPropsGeneral());
        this.connOra.Conectar();
        return this.connOra.isConnOk();
    }
}
