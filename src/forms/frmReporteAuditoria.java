/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package forms;

import IFDrivers.PnpDriverFiscal;
import generic.iconBarraProgreso;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.MaskFormatter;

/**
 * Formulario para el Reporte de Auditoria Fiscal
 * @version 1.0
 * @author Ing. Javier Alarcon
 */
public class frmReporteAuditoria extends javax.swing.JDialog {

    /*---------------------------------------------------*/
    /*---               Constructores                 ---*/
    /*---------------------------------------------------*/
    /**
     * Constructor estandar de la clase jDialog
     * @param parent
     * @param modal
     */
    public frmReporteAuditoria(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
            e.printStackTrace();
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.iconos = new iconBarraProgreso();
        inicializar();
    }
    
    /**
     * Constructor modificado con archivo de config de la clase jDialog
     * @param parent
     * @param modal
     * @param configFiscal
     */
    public frmReporteAuditoria(java.awt.Frame parent, boolean modal, Properties configFiscal) {
        super(parent, modal);
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
            e.printStackTrace();
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.configFiscal = configFiscal;
        this.iconos = new iconBarraProgreso();
        inicializar();
    }

    /**
     * Colocar imagen del titulo de la pantalla
     * @return 
     */
    public Image getIconImage(){
        Image retValue;
        retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("recurso/Iconos/tunal_icon.png"));

        return retValue;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelInformacion = new javax.swing.JPanel();
        jlblTipoReporte = new javax.swing.JLabel();
        jcmbbTipoReporte = new javax.swing.JComboBox();
        jlblDesde = new javax.swing.JLabel();
        jlblHasta = new javax.swing.JLabel();
        try{
            jftxtDesde = new javax.swing.JFormattedTextField(new FormatoFecha());
        } catch (Exception ex){
            jftxtDesde = new javax.swing.JFormattedTextField();
        }
        jftxtHasta = new javax.swing.JFormattedTextField();
        jpanelBotones = new javax.swing.JPanel();
        jcmdImprimir = new javax.swing.JButton();
        jcmdCancelar = new javax.swing.JButton();
        jcmdSalir = new javax.swing.JButton();
        jtbarNotificacion = new javax.swing.JToolBar();
        jsprMargen = new javax.swing.JToolBar.Separator();
        jlblLogoTunal = new javax.swing.JLabel();
        jsprMargen1 = new javax.swing.JToolBar.Separator();
        jlblNotificacion = new javax.swing.JLabel();
        jtbarInfo = new javax.swing.JToolBar();
        jlblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Impresora Fiscal Epson VE - El Tunal C.A.");
        setModal(true);
        setResizable(false);

        jpanelInformacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporte Impresora Fiscal"));
        jpanelInformacion.setFocusable(false);

        jlblTipoReporte.setText("Tipo de reporte");
        jlblTipoReporte.setFocusable(false);

        jcmbbTipoReporte.setToolTipText("<HTML>\n<BODY>\nSeleccione el tipo de reporte<br/>\n<B>Por ejemplo</B> Por Numero de Reporte Z o Por rango de Fechas.\n</BODY>\n</HTML>");

        jlblDesde.setText("Desde...");
        jlblDesde.setFocusable(false);

        jlblHasta.setText("Hasta...");
        jlblHasta.setFocusable(false);

        jftxtDesde.setValue(new Date());

        org.jdesktop.layout.GroupLayout jpanelInformacionLayout = new org.jdesktop.layout.GroupLayout(jpanelInformacion);
        jpanelInformacion.setLayout(jpanelInformacionLayout);
        jpanelInformacionLayout.setHorizontalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblTipoReporte)
                    .add(jlblDesde)
                    .add(jlblHasta))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jcmbbTipoReporte, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jftxtDesde)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jftxtHasta))
                .addContainerGap())
        );
        jpanelInformacionLayout.setVerticalGroup(
            jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpanelInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblTipoReporte)
                    .add(jcmbbTipoReporte, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblDesde)
                    .add(jftxtDesde, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 10, Short.MAX_VALUE)
                .add(jpanelInformacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblHasta)
                    .add(jftxtHasta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jpanelBotones.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpanelBotones.setFocusable(false);

        jcmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/print32.png"))); // NOI18N
        jcmdImprimir.setMnemonic('I');
        jcmdImprimir.setText("Imprimir");
        jcmdImprimir.setToolTipText("Guardar modificaciones en la BD");
        jcmdImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdImprimirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdImprimirMouseExited(evt);
            }
        });
        jcmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdImprimirActionPerformed(evt);
            }
        });

        jcmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/Knob_Cancel32.png"))); // NOI18N
        jcmdCancelar.setMnemonic('C');
        jcmdCancelar.setText("Cancelar");
        jcmdCancelar.setToolTipText("Cancelar el proceso");
        jcmdCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdCancelarMouseExited(evt);
            }
        });
        jcmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdCancelarActionPerformed(evt);
            }
        });

        jcmdSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/Knob_LoopOn32.png"))); // NOI18N
        jcmdSalir.setMnemonic('S');
        jcmdSalir.setText("Salir");
        jcmdSalir.setToolTipText("Cerrar pantalla");
        jcmdSalir.setMaximumSize(new java.awt.Dimension(116, 42));
        jcmdSalir.setMinimumSize(new java.awt.Dimension(116, 42));
        jcmdSalir.setPreferredSize(new java.awt.Dimension(116, 42));
        jcmdSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcmdSalirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcmdSalirMouseExited(evt);
            }
        });
        jcmdSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmdSalirActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpanelBotonesLayout = new org.jdesktop.layout.GroupLayout(jpanelBotones);
        jpanelBotones.setLayout(jpanelBotonesLayout);
        jpanelBotonesLayout.setHorizontalGroup(
            jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpanelBotonesLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jcmdImprimir)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jcmdCancelar)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jcmdSalir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jpanelBotonesLayout.linkSize(new java.awt.Component[] {jcmdCancelar, jcmdImprimir, jcmdSalir}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jpanelBotonesLayout.setVerticalGroup(
            jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpanelBotonesLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jpanelBotonesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jcmdCancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jcmdImprimir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcmdSalir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jtbarNotificacion.setFloatable(false);
        jtbarNotificacion.setRollover(true);
        jtbarNotificacion.setFocusable(false);
        jtbarNotificacion.setName(""); // NOI18N
        jtbarNotificacion.add(jsprMargen);

        jlblLogoTunal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recurso/Iconos/tunal_icon.png"))); // NOI18N
        jlblLogoTunal.setFocusable(false);
        jtbarNotificacion.add(jlblLogoTunal);

        jsprMargen1.setSeparatorSize(new java.awt.Dimension(20, 10));
        jtbarNotificacion.add(jsprMargen1);

        jlblNotificacion.setText("                 ");
        jlblNotificacion.setFocusable(false);
        jlblNotificacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jlblNotificacionMouseExited(evt);
            }
        });
        jtbarNotificacion.add(jlblNotificacion);

        jtbarInfo.setFloatable(false);
        jtbarInfo.setRollover(true);
        jtbarInfo.setFocusable(false);

        jlblInfo.setText("                ");
        jlblInfo.setToolTipText("");
        jlblInfo.setFocusable(false);
        jtbarInfo.add(jlblInfo);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jpanelBotones, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(jtbarNotificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 367, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jtbarInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jpanelInformacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jpanelBotones, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtbarNotificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtbarInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cancelar el proceso
     * @param evt 
     */
    private void jcmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdCancelarActionPerformed
        // Variables
        String value = "";
        
        //  Proceso
        jlblNotificacionMouseExited(null);
        
        //  Proceso - Puerto COM
        value = this.configFiscal.getProperty("puerto_imp").trim();
        this.jcmbbTipoReporte.setSelectedItem(value);
        value = "";
        
        // Proceso - Velocidad Puerto COM
        value = this.configFiscal.getProperty("velocidad_imp").trim();
        //this.jspnVelocidadCOM.setValue(Integer.valueOf(value));
        
    }//GEN-LAST:event_jcmdCancelarActionPerformed

    /**
     * Guardar datos de configuracion ImpFiscal
     * @param evt 
     */
    private void jcmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdImprimirActionPerformed
        //  Variables
        String value = "";
        PnpDriverFiscal printer = new PnpDriverFiscal();
        
        //  Proceso
        jlblNotificacionMouseExited(null);
        
        //  Proceso - Imprimir
        try {
            //  Proceso - Puerto COM
            value = this.jcmbbTipoReporte.getSelectedItem().toString().trim();
            this.configFiscal.setProperty("puerto_imp", value);
            value = "";
            
            // Proceso - Velocidad Puerto COM
//            value = this.jspnVelocidadCOM.getValue().toString().trim();
            this.configFiscal.setProperty("velocidad_imp", value);
            
            //  Mensaje del sistema
            this.jlblNotificacion.setIcon(iconos.getSuccessImage());
            this.jlblNotificacion.setText("Guardado Exitosamente!");
//            this.setOk(true);
        } catch (Exception ex) {
            this.jlblNotificacion.setIcon(iconos.getErrorImage());
            this.jlblNotificacion.setText("Error no se pudo guardar la informacion!");
            Logger.getLogger(frmReporteAuditoria.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jcmdImprimirActionPerformed

    /**
     * Salir del formulario actual
     * @param evt 
     */
    private void jcmdSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmdSalirActionPerformed
        //  Proceso
        this.setVisible(false);
    }//GEN-LAST:event_jcmdSalirActionPerformed

    /**
     * Colocar combinacion de teclas para opcion "Guardar" en progressBar Info
     * @param evt 
     */
    private void jcmdImprimirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdImprimirMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + G");
    }//GEN-LAST:event_jcmdImprimirMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdImprimirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdImprimirMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdImprimirMouseExited

    /**
     * Colocar combinacion de teclas para opcion "Cancelar" en progressBar Info
     * @param evt 
     */
    private void jcmdCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdCancelarMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + C");
    }//GEN-LAST:event_jcmdCancelarMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdCancelarMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdCancelarMouseExited

    /**
     * Colocar combinacion de teclas para opcion "Salir" en progressBar Info
     * @param evt 
     */
    private void jcmdSalirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdSalirMouseEntered
        //  Proceso
        this.jlblInfo.setText("Alt + S");
    }//GEN-LAST:event_jcmdSalirMouseEntered

    /**
     * Restaurar progressBar Info
     * @param evt 
     */
    private void jcmdSalirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmdSalirMouseExited
        //  Proceso
        this.jlblInfo.setText("         ");
    }//GEN-LAST:event_jcmdSalirMouseExited

    /**
     * Restaurar progressBar Notificacion
     * @param evt 
     */
    private void jlblNotificacionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblNotificacionMouseExited
        //  Proceso
        this.jlblNotificacion.setText("         ");
        this.jlblNotificacion.setIcon(null);
    }//GEN-LAST:event_jlblNotificacionMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jcmbbTipoReporte;
    private javax.swing.JButton jcmdCancelar;
    private javax.swing.JButton jcmdImprimir;
    private javax.swing.JButton jcmdSalir;
    private javax.swing.JFormattedTextField jftxtDesde;
    private javax.swing.JFormattedTextField jftxtHasta;
    private javax.swing.JLabel jlblDesde;
    private javax.swing.JLabel jlblHasta;
    private javax.swing.JLabel jlblInfo;
    private javax.swing.JLabel jlblLogoTunal;
    private javax.swing.JLabel jlblNotificacion;
    private javax.swing.JLabel jlblTipoReporte;
    private javax.swing.JPanel jpanelBotones;
    private javax.swing.JPanel jpanelInformacion;
    private javax.swing.JToolBar.Separator jsprMargen;
    private javax.swing.JToolBar.Separator jsprMargen1;
    private javax.swing.JToolBar jtbarInfo;
    private javax.swing.JToolBar jtbarNotificacion;
    // End of variables declaration//GEN-END:variables

    /*---------------------------------------------------*/
    /*---                  Atributos                  ---*/
    /*---------------------------------------------------*/
    private Properties configFiscal;
    private iconBarraProgreso iconos;

    /*---------------------------------------------------*/
    /*---             Metodos Set y Get               ---*/
    /*---------------------------------------------------*/
    /**
     * Retorna el archivo properties de config ImpFiscal
     * @return configFiscal
     */
    public Properties getConfigFiscal() {
        return configFiscal;
    }

    /**
     * Asignar el archivo properties de config ImpFiscal
     * @param configFiscal
     */
    public void setConfigFiscal(Properties configFiscal) {
        this.configFiscal = configFiscal;
    }
    
    /*---------------------------------------------------*/
    /*---             Metodos especificos             ---*/
    /*---------------------------------------------------*/
    /**
     * Inicializar valores del formulario segun archivo
     * de configuracion
     */
    public final void inicializar(){
        
        //  Variables
        
        //  Proceso
        
    }
    
    /** Mascara para fecha/hora a nuestro gusto */
    class FormatoFecha extends MaskFormatter
    {
        /** Se construye con el patrón deseado */
        public FormatoFecha() throws ParseException
        {
            // Las # son cifras y representa "dd/mm/yy"
            super ("##/##/##");
        }

        /** Una clase adecuada para convertir Date a String y viceversa de forma cómoda. Puedes ver cómo se hace el patrón "dd/MM/yy kk:mm:ss" en la API.
            El patrón que pongamos aquí debe cuadrar correctamente con la máscara que hemos puesto en el constructor */
        private final SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yy");

        /** Convierte el texto del editor en un Date */
        @Override
        public Object stringToValue(String text) throws ParseException
        {
            return formato.parseObject(text);
        }

        /** Redibe un Date o null y debe convertirlo a texto que cumpla el patrón indicado anteriormente */
        @Override
        public String valueToString(Object value) throws ParseException
        {
            if (value instanceof Date)
                return formato.format((Date)value);
            return formato.format(new Date());
        }
    }

}
